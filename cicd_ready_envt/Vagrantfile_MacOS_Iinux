Vagrant.configure("2") do |config|
  (4..6).each do |i|
    config.vm.define "node#{i}" do |node|
      node.vm.box = "alvistack/ubuntu-22.04"
      node.vm.boot_timeout = 488
      node.vm.network "private_network", ip: "192.168.56.#{i}"
      node.vm.network "private_network", ip: "192.168.57.#{i}"

      node.vm.provider "virtualbox" do |vb|
        vb.gui = true
        vb.cpus = "2"
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", 4]
        vb.memory = (i == 4) ? "4096" : "2048"
      end

      node.vm.provision 'shell', inline: <<-SHELL
        for file in /vagrant/scripts/*; do
          [ -e "$file" ] || continue
          sed -i 's/\\r//g' "$file"
          sed -i 's/[^[:print:]\\t]//g' "$file"
          chmod +x "$file"
          echo "Cleaned and made executable: $file"
        done
      SHELL

      node.vm.provision 'shell', path: './scripts/01_set.sh', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/02_set.py', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/03_set.py', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/04_set.py', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/05_set.py', run: 'always'
      node.vm.provision 'shell', path: './scripts/07_set.sh', run: 'always'
      node.vm.provision 'shell', path: './scripts/08_set.sh', run: 'always'
      node.vm.provision 'shell', path: './scripts/09_set.sh', run: 'always'
      node.vm.provision 'shell', path: './scripts/compute_add.sh', run: 'always'

      if i == 4
        node.vm.provision 'shell', inline: <<-SHELL
          echo "Logging system status before reset..."
          sudo systemctl status sshd
          sudo journalctl -xe
          echo "Scheduling reboot in 1 minute..."
          sudo shutdown -r +1
          echo "Waiting 70 seconds for the scheduled reboot to start..."
          sleep 70
        SHELL
      end
    end
  end

  config.trigger.after :up do |trigger|
    trigger.info = "Resetting node4 using VBoxManage from host..."
    trigger.run = {
      inline: "VBoxManage controlvm node4 reset"
    }
  end

  config.trigger.after :provision do |trigger|
    trigger.info = "Attempting to reconnect to node4 via SSH..."
    trigger.run = {
      inline: <<-SCRIPT
        RETRIES=20
        for attempt in $(seq 1 $RETRIES); do
          echo "Attempt $attempt: Trying to SSH into node4..."
          if vagrant ssh node4 -c 'echo SSH connection successful'; then
            echo "SSH connection successful"
            exit 0
          else
            echo "SSH connection failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        echo "Finished SSH reconnection attempts for node4."
        exit 1
      SCRIPT
    }
  end
end
