Vagrant.configure("2") do |config|
  (4..6).each do |i|
    config.vm.define "node#{i}" do |node|
      node.vm.box = "alvistack/ubuntu-22.04"
      node.vm.boot_timeout = 488 # Increased timeout to 488 seconds
      node.vm.network "private_network", ip: "192.168.56.#{i}"
      node.vm.provider "virtualbox" do |vb|
        vb.gui = true # Enable GUI mode
        vb.cpus = "2"
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", 4]
        vb.memory = (i == 4) ? "4096" : "2048" # Assign 4GB to node4, 2GB to others
      end

      # Command to clean and make all files executable
      node.vm.provision 'shell', inline: <<-SHELL
        for file in /vagrant/scripts/*; do
          [ -e "$file" ] || continue
          sed -i 's/\\r//g' "$file"
          sed -i 's/[^[:print:]\\t]//g' "$file"
          chmod +x "$file"
          echo "Cleaned and made executable: $file"
        done
      SHELL
      node.vm.provision 'shell', path: './scripts/01_set.sh', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/02_set.py', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/03_set.py', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/04_set.py', run: 'always'
      node.vm.provision 'shell', inline: 'sudo python3 /vagrant/scripts/05_set.py', run: 'always'
      node.vm.provision 'shell', path: './scripts/07_set.sh', run: 'always'
      node.vm.provision 'shell', path: './scripts/08_set.sh', run: 'always'
      node.vm.provision 'shell', path: './scripts/09_set.sh', run: 'always'
      node.vm.provision 'shell', path: './scripts/compute_add.sh', run: 'always'

      # Log system status before reset
      node.vm.provision 'shell', inline: <<-SHELL
        echo "Logging system status before reset for node#{i}..."
        sudo systemctl status sshd
        sudo journalctl -xe
      SHELL

      # Schedule a reboot after 1 minute using shutdown command
      node.vm.provision 'shell', inline: <<-SHELL
        echo "Scheduling reboot in 1 minute for node#{i}..."
        sudo shutdown -r +1
      SHELL

      # Wait for the scheduled reboot to start
      node.vm.provision 'shell', inline: <<-SHELL
        echo "Waiting 70 seconds for the scheduled reboot to start for node#{i}..."
        sleep 70
      SHELL
    end
  end

  # Function to reset VM using VBoxManage
  def reset_vm(vm_name)
    <<-SCRIPT
      echo "Resetting #{vm_name} using VBoxManage..."
      "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe" controlvm #{vm_name} reset
      echo "Attempting to reconnect to #{vm_name} via SSH..."
      RETRIES=20
      for attempt in $(seq 1 $RETRIES); do
        echo "Attempt $attempt: Trying to SSH into #{vm_name}..."
        if vagrant ssh #{vm_name} -c 'echo SSH connection successful'; then
          echo "SSH connection successful for #{vm_name}"
          exit 0
        else
          echo "SSH connection failed for #{vm_name}, retrying in 30 seconds..."
          sleep 30
        fi
      done
      echo "Finished SSH reconnection attempts for #{vm_name}. VM reset might be required again."
      exit 1
    SCRIPT
  end

  # Retry SSH connection and reset VM if necessary
  config.trigger.after :provision do |trigger|
    (4..6).each do |i|
      trigger.info = "Attempting to reconnect to node#{i} via SSH and reset if necessary..."
      trigger.run = {
        inline: <<-SCRIPT
          RETRIES=20
          for attempt in $(seq 1 $RETRIES); do
            echo "Attempt $attempt: Trying to SSH into node#{i}..."
            if vagrant ssh node#{i} -c 'echo SSH connection successful'; then
              echo "SSH connection successful for node#{i}"
              exit 0
            else
              echo "SSH connection failed for node#{i}, retrying in 30 seconds..."
              sleep 30
            fi
          done
          echo "SSH connection failed after multiple attempts, resetting node#{i}..."
          #{reset_vm("node#{i}")}
        SCRIPT
      }
    end
  end
end
